target:
  type: rockset
  api_key: <enter_api_key_here>
  workspace: "dbt_test_{{ var('_dbt_random_suffix') }}"
projects:
  - overrides: incremental
    paths:
      models/incremental.sql:
        materialized: incremental
        # Cast as int required for numeric ordering of id field
        body: |
            select * from {{ source('raw', 'seed') }}
            {% if is_incremental() %}
            where CAST(id as int) > (select max(CAST(id as int)) from {{ this }})
            {% endif %}

  - name: base
    paths:
      data/base.csv: files.seeds.base
      models/view_model.sql: files.models.base_view
      models/table_model.sql: files.models.base_table
      models/swappable.sql: files.models.base_materialized_var
      models/schema.yml: files.schemas.base
    facts:
      seed:
        length: 1
        names:
          - base
      run:
        length: 3
        names:
          - view_model
          - table_model
          - swappable
      catalog:
        nodes:
          length: 4
        sources:
          length: 1
      persisted_relations:
        - base
        - view_model
        - table_model
        - swappable
      base:
        rowcount: 10
      base-after-second-seed:
        rowcount: 20
      base-after-third-seed:
        rowcount: 30
      expected_types_view:
        base: table
        view_model: view
        table_model: table
        swappable: view
      expected_types_table:
        base: table
        view_model: view
        table_model: table
        swappable: table
  - name: ephemeral
    paths:
      data/base.csv: files.seeds.base
      models/ephemeral.sql: files.models.ephemeral
      models/view_model.sql: files.models.ephemeral_view
      models/table_model.sql: files.models.ephemeral_table
      models/schema.yml: files.schemas.base
    facts:
      seed:
        length: 1
        names:
          - base
      run:
        length: 2
        names:
          - view_model
          - table_model
      catalog:
        nodes:
          length: 3
        sources:
          length: 1
      persisted_relations:
        - base
        - view_model
        - table_model
      base:
        rowcount: 10

  # The crazy id match is used to make sure that 0 rows are selected
  - name: zero-rows
    paths:
      data/base.csv: files.seeds.base
      models/incremental.sql:
        materialized: incremental
        body: "select * from dbt_test_{{ var('_dbt_random_suffix') }}.base WHERE id = 99999999999999999;"
    facts:
      base:
        rowcount: 10
      incremental:
        rowcount: 0

sequences:
  # These three standard, built-in tests pass with no problem
  test_dbt_empty: empty
  test_dbt_data_test: data_test
  test_dbt_schema_test: schema_test

  # These next two tests come from the builtin base and ephemeral tests respectively,
  # but we've put them inline here **without the catalog step**, because our dbt docs
  # command does not implement all features.
  base_without_catalog:
    project: base
    sequence:
      - type: dbt
        cmd: seed
      - type: run_results
        length: fact.seed.length
      - type: dbt
        cmd: run
      - type: run_results
        length: fact.run.length
      - type: relation_types
        expect: fact.expected_types_table
      - type: relation_rows
        name: base
        length: fact.base.rowcount
      - type: relations_equal
        relations: fact.persisted_relations
      - type: dbt
        cmd: docs generate
      - type: catalog
        exists: True
      # now swap
      - type: dbt
        cmd: run -m swappable
        vars:
          materialized_var: view
      - type: run_results
        length: 1
      - type: relation_types
        expect: fact.expected_types_view
      # now incremental
      - type: dbt
        cmd: run -m swappable
        vars:
          materialized_var: incremental
      - type: run_results
        length: 1
      - type: relation_types
        expect: fact.expected_types_table
  ephemeral_without_catalog:
    project: ephemeral
    sequence:
      - type: dbt
        cmd: seed
      - type: run_results
        length: fact.seed.length
      - type: dbt
        cmd: run
      - type: run_results
        length: fact.run.length
      - type: relation_rows
        name: base
        length: fact.base.rowcount
      - type: relations_equal
        relations: fact.persisted_relations
      - type: dbt
        cmd: docs generate
      - type: catalog
        exists: True

  test_dbt_incremental:
    project: incremental
    sequence:
      - type: dbt
        cmd: seed
      - type: run_results
        length: fact.seed.length
      - type: dbt
        cmd: run
        vars:
          seed_name: base
      - type: relation_rows
        name: base
        length: fact.base.rowcount
      - type: run_results
        length: fact.run.length
      - type: relations_equal
        relations:
          - base
          - incremental
      - type: dbt
        cmd: run
        vars:
          seed_name: added
      - type: relation_rows
        name: added
        length: fact.added.rowcount
      - type: run_results
        length: fact.run.length
      - type: relations_equal
        relations:
          - added
          - incremental
      - type: dbt
        cmd: docs generate
      - type: catalog
        exists: True
        nodes:
          length: fact.catalog.nodes.length
        # No checks against source doc generation


  # This test seeds a collection, then seeds it two more times and ensures that docs are incrementally added
  # each time. Then, it seeds in full refresh mode and ensures that docs are back to 10
  seed:
    project: base
    sequence:
      - type: dbt
        cmd: seed
      - type: relation_rows
        name: base
        length: fact.base.rowcount
      - type: dbt
        cmd: seed
      - type: relation_rows
        name: base
        length: fact.base-after-second-seed.rowcount
      - type: dbt
        cmd: seed
      - type: relation_rows
        name: base
        length: fact.base-after-third-seed.rowcount
      - type: dbt
        cmd: seed --full-refresh
      - type: relation_rows
        name: base
        length: fact.base.rowcount

  # Test the case where a query inserts 0 rows into the collection. This was a bug previously, where we would fail on
  # queries that returned 0 rows
  zero-rows:
    project: zero-rows
    sequence:
      - type: dbt
        cmd: seed
      - type: relation_rows
        name: base
        length: fact.base.rowcount
      - type: dbt
        cmd: run
      - type: relation_rows
        name: incremental
        length: fact.incremental.rowcount
